// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewHTTPGetter creates a new instance of HTTPGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHTTPGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *HTTPGetter {
	mock := &HTTPGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// HTTPGetter is an autogenerated mock type for the HTTPGetter type
type HTTPGetter struct {
	mock.Mock
}

type HTTPGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *HTTPGetter) EXPECT() *HTTPGetter_Expecter {
	return &HTTPGetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type HTTPGetter
func (_mock *HTTPGetter) Get(url string) (*http.Response, error) {
	ret := _mock.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*http.Response, error)); ok {
		return returnFunc(url)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = returnFunc(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(url)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// HTTPGetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HTTPGetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - url
func (_e *HTTPGetter_Expecter) Get(url interface{}) *HTTPGetter_Get_Call {
	return &HTTPGetter_Get_Call{Call: _e.mock.On("Get", url)}
}

func (_c *HTTPGetter_Get_Call) Run(run func(url string)) *HTTPGetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *HTTPGetter_Get_Call) Return(resp *http.Response, err error) *HTTPGetter_Get_Call {
	_c.Call.Return(resp, err)
	return _c
}

func (_c *HTTPGetter_Get_Call) RunAndReturn(run func(url string) (*http.Response, error)) *HTTPGetter_Get_Call {
	_c.Call.Return(run)
	return _c
}
